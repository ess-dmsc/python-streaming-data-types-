# automatically generated by the FlatBuffers compiler, do not modify

# namespace:

import flatbuffers
from flatbuffers.compat import import_numpy

np = import_numpy()


class RawReadoutMessage(object):
    __slots__ = ["_tab"]

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RawReadoutMessage()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRawReadoutMessage(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)

    @classmethod
    def RawReadoutMessageBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(
            buf, offset, b"\x61\x72\x35\x31", size_prefixed=size_prefixed
        )

    # RawReadoutMessage
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RawReadoutMessage
    def SourceName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RawReadoutMessage
    def MessageId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # RawReadoutMessage
    def RawData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(
                flatbuffers.number_types.Uint8Flags,
                a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1),
            )
        return 0

    # RawReadoutMessage
    def RawDataAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # RawReadoutMessage
    def RawDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RawReadoutMessage
    def RawDataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0


def RawReadoutMessageStart(builder):
    builder.StartObject(3)


def Start(builder):
    RawReadoutMessageStart(builder)


def RawReadoutMessageAddSourceName(builder, sourceName):
    builder.PrependUOffsetTRelativeSlot(
        0, flatbuffers.number_types.UOffsetTFlags.py_type(sourceName), 0
    )


def AddSourceName(builder, sourceName):
    RawReadoutMessageAddSourceName(builder, sourceName)


def RawReadoutMessageAddMessageId(builder, messageId):
    builder.PrependInt64Slot(1, messageId, 0)


def AddMessageId(builder, messageId):
    RawReadoutMessageAddMessageId(builder, messageId)


def RawReadoutMessageAddRawData(builder, rawData):
    builder.PrependUOffsetTRelativeSlot(
        2, flatbuffers.number_types.UOffsetTFlags.py_type(rawData), 0
    )


def AddRawData(builder, rawData):
    RawReadoutMessageAddRawData(builder, rawData)


def RawReadoutMessageStartRawDataVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)


def StartRawDataVector(builder, numElems: int) -> int:
    return RawReadoutMessageStartRawDataVector(builder, numElems)


def RawReadoutMessageEnd(builder):
    return builder.EndObject()


def End(builder):
    return RawReadoutMessageEnd(builder)
